---

## Setting Up a Local Kubernetes Cluster with Minikube

### Installing kubectl and kubeadm (v1.29)

#### Linux (Debian)

1. Install required packages:
   ```bash
   sudo apt-get update
   sudo apt-get install -y apt-transport-https ca-certificates curl
   ```

2. Add the Kubernetes repository signing key:
   ```bash
   curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   ```

3. Add the Kubernetes repository:
   ```bash
   echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   ```

4. Update and install kubectl and kubeadm:
   ```bash
   sudo apt-get update
   sudo apt-get install -y kubectl kubeadm
   ```

### Installing Minikube

1. Download the Minikube binary for Debian:
   ```bash
   curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
   ```

2. Install Minikube:
   ```bash
   sudo dpkg -i minikube_latest_amd64.deb
   ```

### Starting the Local Kubernetes Cluster

1. Start Minikube:
   ```bash
   minikube start
   ```

2. Add a node to the cluster:
   ```bash
   minikube node add
   ```

### Testing in Local Environment

1. Load your Docker image into Minikube:
   ```bash
   minikube image load <your_image_name>/api-asp:latest
   ```

2. Expose your service:
   ```bash
   kubectl port-forward -n bestrong service/bestrong-api-svc <local_port>:8080
   ```

   For example, to use port 8080 locally:
   ```bash
   kubectl port-forward -n bestrong service/bestrong-api-svc 8080:8080
   ```

Now you can test and interact with your Kubernetes cluster running locally using Minikube.
